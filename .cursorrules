# Sky Fighter TypeScript プロジェクトのルール

## プロジェクトコンテキスト
このプロジェクトは「Sky Fighter」という名前の横スクロール飛行機シューティングゲームです。
詳細な仕様や技術情報については、必ず @README.md を参照してください。

## コーディング規約
- TypeScriptを使用し、型安全性を重視する
- ES6モジュールシステムを使用する
- HTML5 Canvas 2D APIを使用したゲーム開発
- 関数型プログラミングとオブジェクト指向の適切な組み合わせ
- 日本語でのコメントとドキュメント

## ゲーム仕様（README.mdから自動参照）
- 3ステージ制のボス戦型シューティングゲーム
- 8種類のパワーアップアイテム
- ランキング機能（localStorage使用）
- WASD/矢印キーでの移動、スペースキーでの攻撃

## アーキテクチャ
- src/main.ts: メインゲームクラス
- src/player.ts: プレイヤークラス  
- src/enemies.ts: 敵・ボスクラス
- src/bullets.ts: 弾丸クラス
- src/powerups.ts: パワーアップアイテム
- src/ranking.ts: ランキング管理
- src/utils.ts: 共通ユーティリティ
- src/types.ts: 型定義

## 開発指針
- 新機能や変更を実装する際は、README.mdの仕様との整合性を確認する
- ゲームバランスの調整はsrc/utils.tsのGAME_CONFIGを使用する
- 全ての応答は日本語で行う
- コードの可読性と保守性を重視する

### Git/GitHubワークフロー
1. **ブランチ作成** - TODOの対応を行う前に、mainブランチから新規ブランチを作成し、作業を開始する
2. **コミット・プッシュ** - 対応完了後、変更内容をコミット、プッシュする  
3. **プルリクエスト作成** - GitHub MCPを使用して、変更したブランチからmainブランチへプルリクエストを投げる

## 参照ファイル
チャット開始時やコンテキストが必要な場合は @README.md を自動的に参照してプロジェクトの全体像を把握してください。
長期的なTODOや詳細な機能仕様については @TODO.md を参照してください。 



